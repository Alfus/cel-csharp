//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\git\cel-csharp\Cel\CommonExpressionLanguage.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Cel {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CommonExpressionLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQUALS=1, NOT_EQUALS=2, IN=3, LESS=4, LESS_EQUALS=5, GREATER_EQUALS=6,
		GREATER=7, LOGICAL_AND=8, LOGICAL_OR=9, LBRACKET=10, RPRACKET=11, LBRACE=12,
		RBRACE=13, LPAREN=14, RPAREN=15, DOT=16, COMMA=17, MINUS=18, EXCLAM=19,
		QUESTIONMARK=20, COLON=21, PLUS=22, STAR=23, SLASH=24, PERCENT=25, CEL_TRUE=26,
		CEL_FALSE=27, NUL=28, WHITESPACE=29, COMMENT=30, NUM_FLOAT=31, NUM_INT=32,
		NUM_UINT=33, STRING=34, BYTES=35, IDENTIFIER=36;
	public const int
		RULE_start = 0, RULE_expr = 1, RULE_conditionalOr = 2, RULE_conditionalAnd = 3,
		RULE_relation = 4, RULE_calc = 5, RULE_unary = 6, RULE_member = 7, RULE_primary = 8,
		RULE_exprList = 9, RULE_listInit = 10, RULE_fieldInitializerList = 11,
		RULE_optField = 12, RULE_mapInitializerList = 13, RULE_optExpr = 14, RULE_literal = 15;
	public static readonly string[] ruleNames = {
		"start", "expr", "conditionalOr", "conditionalAnd", "relation", "calc",
		"unary", "member", "primary", "exprList", "listInit", "fieldInitializerList",
		"optField", "mapInitializerList", "optExpr", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'=='", "'!='", "'in'", "'<'", "'<='", "'>='", "'>'", "'&&'", "'||'",
		"'['", "']'", "'{'", "'}'", "'('", "')'", "'.'", "','", "'-'", "'!'",
		"'?'", "':'", "'+'", "'*'", "'/'", "'%'", "'true'", "'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQUALS", "NOT_EQUALS", "IN", "LESS", "LESS_EQUALS", "GREATER_EQUALS",
		"GREATER", "LOGICAL_AND", "LOGICAL_OR", "LBRACKET", "RPRACKET", "LBRACE",
		"RBRACE", "LPAREN", "RPAREN", "DOT", "COMMA", "MINUS", "EXCLAM", "QUESTIONMARK",
		"COLON", "PLUS", "STAR", "SLASH", "PERCENT", "CEL_TRUE", "CEL_FALSE",
		"NUL", "WHITESPACE", "COMMENT", "NUM_FLOAT", "NUM_INT", "NUM_UINT", "STRING",
		"BYTES", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CommonExpressionLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CommonExpressionLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CommonExpressionLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CommonExpressionLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public ExprContext e;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CommonExpressionLanguageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_localctx.e = expr();
			State = 33;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ConditionalOrContext e;
		public IToken op;
		public ConditionalOrContext e1;
		public ExprContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrContext[] conditionalOr() {
			return GetRuleContexts<ConditionalOrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrContext conditionalOr(int i) {
			return GetRuleContext<ConditionalOrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CommonExpressionLanguageParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(CommonExpressionLanguageParser.QUESTIONMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			_localctx.e = conditionalOr();
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTIONMARK) {
				{
				State = 36;
				_localctx.op = Match(QUESTIONMARK);
				State = 37;
				_localctx.e1 = conditionalOr();
				State = 38;
				Match(COLON);
				State = 39;
				_localctx.e2 = expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrContext : ParserRuleContext {
		public ConditionalAndContext e;
		public IToken s9;
		public IList<IToken> _ops = new List<IToken>();
		public ConditionalAndContext _conditionalAnd;
		public IList<ConditionalAndContext> _e1 = new List<ConditionalAndContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndContext[] conditionalAnd() {
			return GetRuleContexts<ConditionalAndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndContext conditionalAnd(int i) {
			return GetRuleContext<ConditionalAndContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGICAL_OR() { return GetTokens(CommonExpressionLanguageParser.LOGICAL_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR(int i) {
			return GetToken(CommonExpressionLanguageParser.LOGICAL_OR, i);
		}
		public ConditionalOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrContext conditionalOr() {
		ConditionalOrContext _localctx = new ConditionalOrContext(Context, State);
		EnterRule(_localctx, 4, RULE_conditionalOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			_localctx.e = conditionalAnd();
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOGICAL_OR) {
				{
				{
				State = 44;
				_localctx.s9 = Match(LOGICAL_OR);
				_localctx._ops.Add(_localctx.s9);
				State = 45;
				_localctx._conditionalAnd = conditionalAnd();
				_localctx._e1.Add(_localctx._conditionalAnd);
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndContext : ParserRuleContext {
		public RelationContext e;
		public IToken s8;
		public IList<IToken> _ops = new List<IToken>();
		public RelationContext _relation;
		public IList<RelationContext> _e1 = new List<RelationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGICAL_AND() { return GetTokens(CommonExpressionLanguageParser.LOGICAL_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND(int i) {
			return GetToken(CommonExpressionLanguageParser.LOGICAL_AND, i);
		}
		public ConditionalAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndContext conditionalAnd() {
		ConditionalAndContext _localctx = new ConditionalAndContext(Context, State);
		EnterRule(_localctx, 6, RULE_conditionalAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			_localctx.e = relation(0);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOGICAL_AND) {
				{
				{
				State = 52;
				_localctx.s8 = Match(LOGICAL_AND);
				_localctx._ops.Add(_localctx.s8);
				State = 53;
				_localctx._relation = relation(0);
				_localctx._e1.Add(_localctx._relation);
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public CalcContext calc() {
			return GetRuleContext<CalcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(CommonExpressionLanguageParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(CommonExpressionLanguageParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(CommonExpressionLanguageParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(CommonExpressionLanguageParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CommonExpressionLanguageParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(CommonExpressionLanguageParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CommonExpressionLanguageParser.IN, 0); }
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		return relation(0);
	}

	private RelationContext relation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationContext _localctx = new RelationContext(Context, _parentState);
		RelationContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_relation, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 60;
			calc(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 67;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RelationContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relation);
					State = 62;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 63;
					_localctx.op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 254L) != 0) ) {
						_localctx.op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 64;
					relation(2);
					}
					}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CalcContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CalcContext[] calc() {
			return GetRuleContexts<CalcContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CalcContext calc(int i) {
			return GetRuleContext<CalcContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(CommonExpressionLanguageParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(CommonExpressionLanguageParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(CommonExpressionLanguageParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(CommonExpressionLanguageParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CommonExpressionLanguageParser.MINUS, 0); }
		public CalcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalcContext calc() {
		return calc(0);
	}

	private CalcContext calc(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CalcContext _localctx = new CalcContext(Context, _parentState);
		CalcContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_calc, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 71;
			unary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 81;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 79;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new CalcContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_calc);
						State = 73;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 74;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 58720256L) != 0) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 75;
						calc(3);
						}
						break;
					case 2:
						{
						_localctx = new CalcContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_calc);
						State = 76;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 77;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 78;
						calc(2);
						}
						break;
					}
					}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }

		public UnaryContext() { }
		public virtual void CopyFrom(UnaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalNotContext : UnaryContext {
		public IToken s19;
		public IList<IToken> _ops = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLAM() { return GetTokens(CommonExpressionLanguageParser.EXCLAM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAM(int i) {
			return GetToken(CommonExpressionLanguageParser.EXCLAM, i);
		}
		public LogicalNotContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExprContext : UnaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public MemberExprContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : UnaryContext {
		public IToken s18;
		public IList<IToken> _ops = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(CommonExpressionLanguageParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(CommonExpressionLanguageParser.MINUS, i);
		}
		public NegateContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 12, RULE_unary);
		int _la;
		try {
			int _alt;
			State = 97;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new MemberExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				member(0);
				}
				break;
			case 2:
				_localctx = new LogicalNotContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 85;
					((LogicalNotContext)_localctx).s19 = Match(EXCLAM);
					((LogicalNotContext)_localctx)._ops.Add(((LogicalNotContext)_localctx).s19);
					}
					}
					State = 88;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EXCLAM );
				State = 90;
				member(0);
				}
				break;
			case 3:
				_localctx = new NegateContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 91;
						((NegateContext)_localctx).s18 = Match(MINUS);
						((NegateContext)_localctx)._ops.Add(((NegateContext)_localctx).s18);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 94;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 96;
				member(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }

		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MemberCallContext : MemberContext {
		public IToken op;
		public IToken id;
		public IToken open;
		public ExprListContext args;
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CommonExpressionLanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(CommonExpressionLanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CommonExpressionLanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CommonExpressionLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public MemberCallContext(MemberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectContext : MemberContext {
		public IToken op;
		public IToken opt;
		public IToken id;
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(CommonExpressionLanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CommonExpressionLanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(CommonExpressionLanguageParser.QUESTIONMARK, 0); }
		public SelectContext(MemberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExprContext : MemberContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExprContext(MemberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexContext : MemberContext {
		public IToken op;
		public IToken opt;
		public ExprContext index;
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRACKET() { return GetToken(CommonExpressionLanguageParser.RPRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(CommonExpressionLanguageParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(CommonExpressionLanguageParser.QUESTIONMARK, 0); }
		public IndexContext(MemberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		return member(0);
	}

	private MemberContext member(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MemberContext _localctx = new MemberContext(Context, _parentState);
		MemberContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_member, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryExprContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 100;
			primary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 126;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 124;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new SelectContext(new MemberContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_member);
						State = 102;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 103;
						((SelectContext)_localctx).op = Match(DOT);
						State = 105;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QUESTIONMARK) {
							{
							State = 104;
							((SelectContext)_localctx).opt = Match(QUESTIONMARK);
							}
						}

						State = 107;
						((SelectContext)_localctx).id = Match(IDENTIFIER);
						}
						break;
					case 2:
						{
						_localctx = new MemberCallContext(new MemberContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_member);
						State = 108;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 109;
						((MemberCallContext)_localctx).op = Match(DOT);
						State = 110;
						((MemberCallContext)_localctx).id = Match(IDENTIFIER);
						State = 111;
						((MemberCallContext)_localctx).open = Match(LPAREN);
						State = 113;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((_la) & ~0x3f) == 0 && ((1L << _la) & 135762105344L) != 0) {
							{
							State = 112;
							((MemberCallContext)_localctx).args = exprList();
							}
						}

						State = 115;
						Match(RPAREN);
						}
						break;
					case 3:
						{
						_localctx = new IndexContext(new MemberContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_member);
						State = 116;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 117;
						((IndexContext)_localctx).op = Match(LBRACKET);
						State = 119;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QUESTIONMARK) {
							{
							State = 118;
							((IndexContext)_localctx).opt = Match(QUESTIONMARK);
							}
						}

						State = 121;
						((IndexContext)_localctx).index = expr();
						State = 122;
						Match(RPRACKET);
						}
						break;
					}
					}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }

		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CreateListContext : PrimaryContext {
		public IToken op;
		public ListInitContext elems;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRACKET() { return GetToken(CommonExpressionLanguageParser.RPRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(CommonExpressionLanguageParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CommonExpressionLanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListInitContext listInit() {
			return GetRuleContext<ListInitContext>(0);
		}
		public CreateListContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateStructContext : PrimaryContext {
		public IToken op;
		public MapInitializerListContext entries;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CommonExpressionLanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CommonExpressionLanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CommonExpressionLanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapInitializerListContext mapInitializerList() {
			return GetRuleContext<MapInitializerListContext>(0);
		}
		public CreateStructContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantLiteralContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ConstantLiteralContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedContext : PrimaryContext {
		public ExprContext e;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CommonExpressionLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CommonExpressionLanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NestedContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateMessageContext : PrimaryContext {
		public IToken leadingDot;
		public IToken _IDENTIFIER;
		public IList<IToken> _ids = new List<IToken>();
		public IToken s16;
		public IList<IToken> _ops = new List<IToken>();
		public IToken op;
		public FieldInitializerListContext entries;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CommonExpressionLanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CommonExpressionLanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CommonExpressionLanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CommonExpressionLanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CommonExpressionLanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(CommonExpressionLanguageParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(CommonExpressionLanguageParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializerListContext fieldInitializerList() {
			return GetRuleContext<FieldInitializerListContext>(0);
		}
		public CreateMessageContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateMessage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentOrGlobalCallContext : PrimaryContext {
		public IToken leadingDot;
		public IToken id;
		public IToken op;
		public ExprListContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CommonExpressionLanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CommonExpressionLanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(CommonExpressionLanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CommonExpressionLanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public IdentOrGlobalCallContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentOrGlobalCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_primary);
		int _la;
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new IdentOrGlobalCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 129;
					((IdentOrGlobalCallContext)_localctx).leadingDot = Match(DOT);
					}
				}

				State = 132;
				((IdentOrGlobalCallContext)_localctx).id = Match(IDENTIFIER);
				State = 138;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 133;
					((IdentOrGlobalCallContext)_localctx).op = Match(LPAREN);
					State = 135;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 135762105344L) != 0) {
						{
						State = 134;
						((IdentOrGlobalCallContext)_localctx).args = exprList();
						}
					}

					State = 137;
					Match(RPAREN);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NestedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 140;
				Match(LPAREN);
				State = 141;
				((NestedContext)_localctx).e = expr();
				State = 142;
				Match(RPAREN);
				}
				break;
			case 3:
				_localctx = new CreateListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 144;
				((CreateListContext)_localctx).op = Match(LBRACKET);
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 135763153920L) != 0) {
					{
					State = 145;
					((CreateListContext)_localctx).elems = listInit();
					}
				}

				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 148;
					Match(COMMA);
					}
				}

				State = 151;
				Match(RPRACKET);
				}
				break;
			case 4:
				_localctx = new CreateStructContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 152;
				((CreateStructContext)_localctx).op = Match(LBRACE);
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 135763153920L) != 0) {
					{
					State = 153;
					((CreateStructContext)_localctx).entries = mapInitializerList();
					}
				}

				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 156;
					Match(COMMA);
					}
				}

				State = 159;
				Match(RBRACE);
				}
				break;
			case 5:
				_localctx = new CreateMessageContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 160;
					((CreateMessageContext)_localctx).leadingDot = Match(DOT);
					}
				}

				State = 163;
				((CreateMessageContext)_localctx)._IDENTIFIER = Match(IDENTIFIER);
				((CreateMessageContext)_localctx)._ids.Add(((CreateMessageContext)_localctx)._IDENTIFIER);
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 164;
					((CreateMessageContext)_localctx).s16 = Match(DOT);
					((CreateMessageContext)_localctx)._ops.Add(((CreateMessageContext)_localctx).s16);
					State = 165;
					((CreateMessageContext)_localctx)._IDENTIFIER = Match(IDENTIFIER);
					((CreateMessageContext)_localctx)._ids.Add(((CreateMessageContext)_localctx)._IDENTIFIER);
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 171;
				((CreateMessageContext)_localctx).op = Match(LBRACE);
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTIONMARK || _la==IDENTIFIER) {
					{
					State = 172;
					((CreateMessageContext)_localctx).entries = fieldInitializerList();
					}
				}

				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 175;
					Match(COMMA);
					}
				}

				State = 178;
				Match(RBRACE);
				}
				break;
			case 6:
				_localctx = new ConstantLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 179;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		public ExprContext _expr;
		public IList<ExprContext> _e = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CommonExpressionLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CommonExpressionLanguageParser.COMMA, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 18, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			_localctx._expr = expr();
			_localctx._e.Add(_localctx._expr);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 183;
				Match(COMMA);
				State = 184;
				_localctx._expr = expr();
				_localctx._e.Add(_localctx._expr);
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListInitContext : ParserRuleContext {
		public OptExprContext _optExpr;
		public IList<OptExprContext> _elems = new List<OptExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public OptExprContext[] optExpr() {
			return GetRuleContexts<OptExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptExprContext optExpr(int i) {
			return GetRuleContext<OptExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CommonExpressionLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CommonExpressionLanguageParser.COMMA, i);
		}
		public ListInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListInitContext listInit() {
		ListInitContext _localctx = new ListInitContext(Context, State);
		EnterRule(_localctx, 20, RULE_listInit);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_localctx._optExpr = optExpr();
			_localctx._elems.Add(_localctx._optExpr);
			State = 195;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 191;
					Match(COMMA);
					State = 192;
					_localctx._optExpr = optExpr();
					_localctx._elems.Add(_localctx._optExpr);
					}
					}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldInitializerListContext : ParserRuleContext {
		public OptFieldContext _optField;
		public IList<OptFieldContext> _fields = new List<OptFieldContext>();
		public IToken s21;
		public IList<IToken> _cols = new List<IToken>();
		public ExprContext _expr;
		public IList<ExprContext> _values = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public OptFieldContext[] optField() {
			return GetRuleContexts<OptFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptFieldContext optField(int i) {
			return GetRuleContext<OptFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(CommonExpressionLanguageParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(CommonExpressionLanguageParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CommonExpressionLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CommonExpressionLanguageParser.COMMA, i);
		}
		public FieldInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldInitializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldInitializerListContext fieldInitializerList() {
		FieldInitializerListContext _localctx = new FieldInitializerListContext(Context, State);
		EnterRule(_localctx, 22, RULE_fieldInitializerList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			_localctx._optField = optField();
			_localctx._fields.Add(_localctx._optField);
			State = 199;
			_localctx.s21 = Match(COLON);
			_localctx._cols.Add(_localctx.s21);
			State = 200;
			_localctx._expr = expr();
			_localctx._values.Add(_localctx._expr);
			State = 208;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 201;
					Match(COMMA);
					State = 202;
					_localctx._optField = optField();
					_localctx._fields.Add(_localctx._optField);
					State = 203;
					_localctx.s21 = Match(COLON);
					_localctx._cols.Add(_localctx.s21);
					State = 204;
					_localctx._expr = expr();
					_localctx._values.Add(_localctx._expr);
					}
					}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptFieldContext : ParserRuleContext {
		public IToken opt;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CommonExpressionLanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(CommonExpressionLanguageParser.QUESTIONMARK, 0); }
		public OptFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptFieldContext optField() {
		OptFieldContext _localctx = new OptFieldContext(Context, State);
		EnterRule(_localctx, 24, RULE_optField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTIONMARK) {
				{
				State = 211;
				_localctx.opt = Match(QUESTIONMARK);
				}
			}

			State = 214;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapInitializerListContext : ParserRuleContext {
		public OptExprContext _optExpr;
		public IList<OptExprContext> _keys = new List<OptExprContext>();
		public IToken s21;
		public IList<IToken> _cols = new List<IToken>();
		public ExprContext _expr;
		public IList<ExprContext> _values = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public OptExprContext[] optExpr() {
			return GetRuleContexts<OptExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptExprContext optExpr(int i) {
			return GetRuleContext<OptExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(CommonExpressionLanguageParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(CommonExpressionLanguageParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CommonExpressionLanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CommonExpressionLanguageParser.COMMA, i);
		}
		public MapInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapInitializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapInitializerListContext mapInitializerList() {
		MapInitializerListContext _localctx = new MapInitializerListContext(Context, State);
		EnterRule(_localctx, 26, RULE_mapInitializerList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_localctx._optExpr = optExpr();
			_localctx._keys.Add(_localctx._optExpr);
			State = 217;
			_localctx.s21 = Match(COLON);
			_localctx._cols.Add(_localctx.s21);
			State = 218;
			_localctx._expr = expr();
			_localctx._values.Add(_localctx._expr);
			State = 226;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 219;
					Match(COMMA);
					State = 220;
					_localctx._optExpr = optExpr();
					_localctx._keys.Add(_localctx._optExpr);
					State = 221;
					_localctx.s21 = Match(COLON);
					_localctx._cols.Add(_localctx.s21);
					State = 222;
					_localctx._expr = expr();
					_localctx._values.Add(_localctx._expr);
					}
					}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptExprContext : ParserRuleContext {
		public IToken opt;
		public ExprContext e;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(CommonExpressionLanguageParser.QUESTIONMARK, 0); }
		public OptExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptExprContext optExpr() {
		OptExprContext _localctx = new OptExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_optExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTIONMARK) {
				{
				State = 229;
				_localctx.opt = Match(QUESTIONMARK);
				}
			}

			State = 232;
			_localctx.e = expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }

		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BytesContext : LiteralContext {
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES() { return GetToken(CommonExpressionLanguageParser.BYTES, 0); }
		public BytesContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBytes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UintContext : LiteralContext {
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_UINT() { return GetToken(CommonExpressionLanguageParser.NUM_UINT, 0); }
		public UintContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullContext : LiteralContext {
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUL() { return GetToken(CommonExpressionLanguageParser.NUL, 0); }
		public NullContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolFalseContext : LiteralContext {
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEL_FALSE() { return GetToken(CommonExpressionLanguageParser.CEL_FALSE, 0); }
		public BoolFalseContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : LiteralContext {
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CommonExpressionLanguageParser.STRING, 0); }
		public StringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleContext : LiteralContext {
		public IToken sign;
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_FLOAT() { return GetToken(CommonExpressionLanguageParser.NUM_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CommonExpressionLanguageParser.MINUS, 0); }
		public DoubleContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolTrueContext : LiteralContext {
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEL_TRUE() { return GetToken(CommonExpressionLanguageParser.CEL_TRUE, 0); }
		public BoolTrueContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : LiteralContext {
		public IToken sign;
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_INT() { return GetToken(CommonExpressionLanguageParser.NUM_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CommonExpressionLanguageParser.MINUS, 0); }
		public IntContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonExpressionLanguageVisitor<TResult> typedVisitor = visitor as ICommonExpressionLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 30, RULE_literal);
		int _la;
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 234;
					((IntContext)_localctx).sign = Match(MINUS);
					}
				}

				State = 237;
				((IntContext)_localctx).tok = Match(NUM_INT);
				}
				break;
			case 2:
				_localctx = new UintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				((UintContext)_localctx).tok = Match(NUM_UINT);
				}
				break;
			case 3:
				_localctx = new DoubleContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 239;
					((DoubleContext)_localctx).sign = Match(MINUS);
					}
				}

				State = 242;
				((DoubleContext)_localctx).tok = Match(NUM_FLOAT);
				}
				break;
			case 4:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 243;
				((StringContext)_localctx).tok = Match(STRING);
				}
				break;
			case 5:
				_localctx = new BytesContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 244;
				((BytesContext)_localctx).tok = Match(BYTES);
				}
				break;
			case 6:
				_localctx = new BoolTrueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 245;
				((BoolTrueContext)_localctx).tok = Match(CEL_TRUE);
				}
				break;
			case 7:
				_localctx = new BoolFalseContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 246;
				((BoolFalseContext)_localctx).tok = Match(CEL_FALSE);
				}
				break;
			case 8:
				_localctx = new NullContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 247;
				((NullContext)_localctx).tok = Match(NUL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return relation_sempred((RelationContext)_localctx, predIndex);
		case 5: return calc_sempred((CalcContext)_localctx, predIndex);
		case 7: return member_sempred((MemberContext)_localctx, predIndex);
		}
		return true;
	}
	private bool relation_sempred(RelationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool calc_sempred(CalcContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool member_sempred(MemberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,36,251,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,42,8,1,1,2,1,2,1,2,5,
		2,47,8,2,10,2,12,2,50,9,2,1,3,1,3,1,3,5,3,55,8,3,10,3,12,3,58,9,3,1,4,
		1,4,1,4,1,4,1,4,1,4,5,4,66,8,4,10,4,12,4,69,9,4,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,5,5,80,8,5,10,5,12,5,83,9,5,1,6,1,6,4,6,87,8,6,11,6,12,6,
		88,1,6,1,6,4,6,93,8,6,11,6,12,6,94,1,6,3,6,98,8,6,1,7,1,7,1,7,1,7,1,7,
		1,7,3,7,106,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,114,8,7,1,7,1,7,1,7,1,7,3,
		7,120,8,7,1,7,1,7,1,7,5,7,125,8,7,10,7,12,7,128,9,7,1,8,3,8,131,8,8,1,
		8,1,8,1,8,3,8,136,8,8,1,8,3,8,139,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,147,
		8,8,1,8,3,8,150,8,8,1,8,1,8,1,8,3,8,155,8,8,1,8,3,8,158,8,8,1,8,1,8,3,
		8,162,8,8,1,8,1,8,1,8,5,8,167,8,8,10,8,12,8,170,9,8,1,8,1,8,3,8,174,8,
		8,1,8,3,8,177,8,8,1,8,1,8,3,8,181,8,8,1,9,1,9,1,9,5,9,186,8,9,10,9,12,
		9,189,9,9,1,10,1,10,1,10,5,10,194,8,10,10,10,12,10,197,9,10,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,5,11,207,8,11,10,11,12,11,210,9,11,1,12,
		3,12,213,8,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,225,
		8,13,10,13,12,13,228,9,13,1,14,3,14,231,8,14,1,14,1,14,1,15,3,15,236,8,
		15,1,15,1,15,1,15,3,15,241,8,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,249,
		8,15,1,15,0,3,8,10,14,16,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,
		3,1,0,1,7,1,0,23,25,2,0,18,18,22,22,281,0,32,1,0,0,0,2,35,1,0,0,0,4,43,
		1,0,0,0,6,51,1,0,0,0,8,59,1,0,0,0,10,70,1,0,0,0,12,97,1,0,0,0,14,99,1,
		0,0,0,16,180,1,0,0,0,18,182,1,0,0,0,20,190,1,0,0,0,22,198,1,0,0,0,24,212,
		1,0,0,0,26,216,1,0,0,0,28,230,1,0,0,0,30,248,1,0,0,0,32,33,3,2,1,0,33,
		34,5,0,0,1,34,1,1,0,0,0,35,41,3,4,2,0,36,37,5,20,0,0,37,38,3,4,2,0,38,
		39,5,21,0,0,39,40,3,2,1,0,40,42,1,0,0,0,41,36,1,0,0,0,41,42,1,0,0,0,42,
		3,1,0,0,0,43,48,3,6,3,0,44,45,5,9,0,0,45,47,3,6,3,0,46,44,1,0,0,0,47,50,
		1,0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,5,1,0,0,0,50,48,1,0,0,0,51,56,3,
		8,4,0,52,53,5,8,0,0,53,55,3,8,4,0,54,52,1,0,0,0,55,58,1,0,0,0,56,54,1,
		0,0,0,56,57,1,0,0,0,57,7,1,0,0,0,58,56,1,0,0,0,59,60,6,4,-1,0,60,61,3,
		10,5,0,61,67,1,0,0,0,62,63,10,1,0,0,63,64,7,0,0,0,64,66,3,8,4,2,65,62,
		1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,9,1,0,0,0,69,67,1,
		0,0,0,70,71,6,5,-1,0,71,72,3,12,6,0,72,81,1,0,0,0,73,74,10,2,0,0,74,75,
		7,1,0,0,75,80,3,10,5,3,76,77,10,1,0,0,77,78,7,2,0,0,78,80,3,10,5,2,79,
		73,1,0,0,0,79,76,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,
		11,1,0,0,0,83,81,1,0,0,0,84,98,3,14,7,0,85,87,5,19,0,0,86,85,1,0,0,0,87,
		88,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,98,3,14,7,0,91,
		93,5,18,0,0,92,91,1,0,0,0,93,94,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,
		96,1,0,0,0,96,98,3,14,7,0,97,84,1,0,0,0,97,86,1,0,0,0,97,92,1,0,0,0,98,
		13,1,0,0,0,99,100,6,7,-1,0,100,101,3,16,8,0,101,126,1,0,0,0,102,103,10,
		3,0,0,103,105,5,16,0,0,104,106,5,20,0,0,105,104,1,0,0,0,105,106,1,0,0,
		0,106,107,1,0,0,0,107,125,5,36,0,0,108,109,10,2,0,0,109,110,5,16,0,0,110,
		111,5,36,0,0,111,113,5,14,0,0,112,114,3,18,9,0,113,112,1,0,0,0,113,114,
		1,0,0,0,114,115,1,0,0,0,115,125,5,15,0,0,116,117,10,1,0,0,117,119,5,10,
		0,0,118,120,5,20,0,0,119,118,1,0,0,0,119,120,1,0,0,0,120,121,1,0,0,0,121,
		122,3,2,1,0,122,123,5,11,0,0,123,125,1,0,0,0,124,102,1,0,0,0,124,108,1,
		0,0,0,124,116,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,
		127,15,1,0,0,0,128,126,1,0,0,0,129,131,5,16,0,0,130,129,1,0,0,0,130,131,
		1,0,0,0,131,132,1,0,0,0,132,138,5,36,0,0,133,135,5,14,0,0,134,136,3,18,
		9,0,135,134,1,0,0,0,135,136,1,0,0,0,136,137,1,0,0,0,137,139,5,15,0,0,138,
		133,1,0,0,0,138,139,1,0,0,0,139,181,1,0,0,0,140,141,5,14,0,0,141,142,3,
		2,1,0,142,143,5,15,0,0,143,181,1,0,0,0,144,146,5,10,0,0,145,147,3,20,10,
		0,146,145,1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,148,150,5,17,0,0,149,
		148,1,0,0,0,149,150,1,0,0,0,150,151,1,0,0,0,151,181,5,11,0,0,152,154,5,
		12,0,0,153,155,3,26,13,0,154,153,1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,
		0,156,158,5,17,0,0,157,156,1,0,0,0,157,158,1,0,0,0,158,159,1,0,0,0,159,
		181,5,13,0,0,160,162,5,16,0,0,161,160,1,0,0,0,161,162,1,0,0,0,162,163,
		1,0,0,0,163,168,5,36,0,0,164,165,5,16,0,0,165,167,5,36,0,0,166,164,1,0,
		0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,
		168,1,0,0,0,171,173,5,12,0,0,172,174,3,22,11,0,173,172,1,0,0,0,173,174,
		1,0,0,0,174,176,1,0,0,0,175,177,5,17,0,0,176,175,1,0,0,0,176,177,1,0,0,
		0,177,178,1,0,0,0,178,181,5,13,0,0,179,181,3,30,15,0,180,130,1,0,0,0,180,
		140,1,0,0,0,180,144,1,0,0,0,180,152,1,0,0,0,180,161,1,0,0,0,180,179,1,
		0,0,0,181,17,1,0,0,0,182,187,3,2,1,0,183,184,5,17,0,0,184,186,3,2,1,0,
		185,183,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,19,
		1,0,0,0,189,187,1,0,0,0,190,195,3,28,14,0,191,192,5,17,0,0,192,194,3,28,
		14,0,193,191,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,
		21,1,0,0,0,197,195,1,0,0,0,198,199,3,24,12,0,199,200,5,21,0,0,200,208,
		3,2,1,0,201,202,5,17,0,0,202,203,3,24,12,0,203,204,5,21,0,0,204,205,3,
		2,1,0,205,207,1,0,0,0,206,201,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,
		208,209,1,0,0,0,209,23,1,0,0,0,210,208,1,0,0,0,211,213,5,20,0,0,212,211,
		1,0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,215,5,36,0,0,215,25,1,0,0,
		0,216,217,3,28,14,0,217,218,5,21,0,0,218,226,3,2,1,0,219,220,5,17,0,0,
		220,221,3,28,14,0,221,222,5,21,0,0,222,223,3,2,1,0,223,225,1,0,0,0,224,
		219,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,27,1,0,
		0,0,228,226,1,0,0,0,229,231,5,20,0,0,230,229,1,0,0,0,230,231,1,0,0,0,231,
		232,1,0,0,0,232,233,3,2,1,0,233,29,1,0,0,0,234,236,5,18,0,0,235,234,1,
		0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,249,5,32,0,0,238,249,5,33,0,
		0,239,241,5,18,0,0,240,239,1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,242,
		249,5,31,0,0,243,249,5,34,0,0,244,249,5,35,0,0,245,249,5,26,0,0,246,249,
		5,27,0,0,247,249,5,28,0,0,248,235,1,0,0,0,248,238,1,0,0,0,248,240,1,0,
		0,0,248,243,1,0,0,0,248,244,1,0,0,0,248,245,1,0,0,0,248,246,1,0,0,0,248,
		247,1,0,0,0,249,31,1,0,0,0,35,41,48,56,67,79,81,88,94,97,105,113,119,124,
		126,130,135,138,146,149,154,157,161,168,173,176,180,187,195,208,212,226,
		230,235,240,248
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Cel
